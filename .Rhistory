error = function(e){
cat(paste0("> Error al intentar leer Excel ", excelFile, '\n'))
message(e)
}
)
# Intentar leer el archivo
data <- tryCatch(
# Try part
data <- read.xlsx(excelFile,
detectDates = TRUE,
skipEmptyRows = TRUE,
skipEmptyCols = TRUE),
# Catch part
warning = function(w){
cat(paste0("> Warning al intentar leer Excel ", excelFile, '\n'))
message(w)
},
error = function(e){
cat(paste0("> Error al intentar leer Excel <", excelFile, '>\n'))
message(e)
}
)
# ----------------------------------------------------------------------------------------------- #
# ------ data01_excel -> Lectura del Excel inicial ---------------------------------------------- #
# ----------------------------------------------------------------------------------------------- #
# Data management 01 - Leer archivo de Excel
library( openxlsx)
# ----------------------------------------------------------------------------------------------- #
# ------ data01_excel -> Lectura del Excel inicial ---------------------------------------------- #
# ----------------------------------------------------------------------------------------------- #
# Data management 01 - Leer archivo de Excel
library(openxlsx)
# Intentar leer el archivo
data <- tryCatch(
# Try part
data <- read.xlsx(excelFile,
detectDates = TRUE,
skipEmptyRows = TRUE,
skipEmptyCols = TRUE),
# Catch part
warning = function(w){
cat(paste0("> Warning al intentar leer Excel ", excelFile, '\n'))
message(w)
},
error = function(e){
cat(paste0("> Error al intentar leer Excel <", excelFile, '>\n'))
message(e)
}
)
View(data)
source('D:/GoogleDrive/ExplorApp/funciones/data01_excel.R', echo=TRUE)
rm(list=ls())
source('D:/GoogleDrive/ExplorApp/funciones/data01_excel.R', echo=TRUE)
DM01_leerExcel(excelFile)
datos <- DM01_leerExcel(excelFile)
stop("Archivo no es un data.frame")
# Intentar leer el archivo
data <- tryCatch(
# Try part
data <- read.xlsx(excelFile,
detectDates = TRUE,
skipEmptyRows = TRUE,
skipEmptyCols = TRUE),
# Catch part
warning = function(w){
cat(paste0("> Warning al intentar leer Excel ", excelFile, '\n'))
message(w)
},
error = function(e){
cat(paste0("> Error al intentar leer Excel <", excelFile, '>\n'))
message(e)
}
)
str(data)
vars <- names(data)
vars
library(glue)
help(package='glue')
glue('# Resumen de inpección archivo {excelFile} \n')
glue('# Resumen de inpección archivo "{excelFile}" \n')
glue('# Resumen inpección archivo "{excelFile}" \n',
'El archivo se pudo leer de manera correcta, las principales caracteristicas son: \n',
'- Número de filas: {f} \n',
'- Número de columnas: {c} \n')
f <- nrow(data)
c <- ncol(data)
vars <- names(data)
glue('# Resumen inpección archivo "{excelFile}" \n',
'El archivo se pudo leer de manera correcta, las principales caracteristicas son: \n',
'- Número de filas: {f} \n',
'- Número de columnas: {c} \n')
glue('# Resumen inpección archivo "{excelFile}" \n',
'El archivo se pudo leer de manera correcta, las principales caracteristicas son: \n\n',
'- Número de filas: {f} \n',
'- Número de columnas: {c} \n',
'- Nombres de variable: {vars} \n')
vars2 <- paste(vars, collapse)
vars2 <- paste(vars, collapse = ',')
vars2 <- paste(vars, collapse = ', ')
glue('# Resumen inpección archivo "{excelFile}" \n',
'El archivo se pudo leer de manera correcta, las principales caracteristicas son: \n\n',
'- Número de filas: {f} \n',
'- Número de columnas: {c} \n',
'- Nombres de variable: {vars2} \n')
library(markdown)
header <- markdownToHTML(text = header)
header <- markdownToHTML(file = header)
header <- markdownToHTML(file = header, fragment.only = TRUE)
markdownToHTML(text = "Hello World!", fragment.only = TRUE)
header <- markdownToHTML(text = header, fragment.only = TRUE)
# Info
header <- glue('# Resumen inpección archivo "{excelFile}" \n',
'El archivo se pudo leer de manera correcta, las principales caracteristicas son: \n\n',
'- Número de filas: {f} \n',
'- Número de columnas: {c} \n',
'- Nombres de variable: {vars2} \n')
header <- markdownToHTML(text = header, fragment.only = TRUE)
header
writeLines('test.html', header)
writeLines(header, 'test.html')
# Info
resumen <- glue('# Resumen inpección archivo "{excelFile}" \n',
'El archivo se pudo leer de manera correcta, las principales caracteristicas son: \n\n',
'- Número de filas: {f} \n',
'- Número de columnas: {c} \n',
'- Nombres de variable: {vars2} \n')
resumen <- markdownToHTML(text = resumen, fragment.only = TRUE,
stylesheet = 'https://gist.githubusercontent.com/andyferra/2554919/raw/10ce87fe71b23216e3075d5648b8b9e56f7758e1/github.css')
writeLines(header, 'test.html')
head <- glue('<link rel="stylesheet"',
'href="', 'https://gist.githubusercontent.com/andyferra/2554919/raw/10ce87fe71b23216e3075d5648b8b9e56f7758e1/github.css','">')
head
head <- glue('<link rel="stylesheet" ',
'href="', 'https://gist.githubusercontent.com/andyferra/2554919/raw/10ce87fe71b23216e3075d5648b8b9e56f7758e1/github.css','">')
head
resumen <- glue('# Resumen inpección archivo "{excelFile}" \n',
'El archivo se pudo leer de manera correcta, las principales caracteristicas son: \n\n',
'- Número de filas: {f} \n',
'- Número de columnas: {c} \n',
'- Nombres de variable: {vars2} \n')
head <- glue('<link rel="stylesheet" ',
'href="', 'https://gist.githubusercontent.com/andyferra/2554919/raw/10ce87fe71b23216e3075d5648b8b9e56f7758e1/github.css','">')
resumen <- markdownToHTML(text = resumen, fragment.only = TRUE,
header = head)
writeLines(header, 'test.html')
# resumen <-
markdownToHTML(text = resumen, fragment.only = TRUE,
header = head)
head
# resumen <-
markdownToHTML(text = resumen, fragment.only = TRUE, header = head)
# resumen <-
print(markdownToHTML(text = resumen, fragment.only = TRUE, header = head))
# resumen <-
markdownToHTML(text = resumen, fragment.only = TRUE, header = head, output = 'test.html')
css <- readLines('https://gist.githubusercontent.com/andyferra/2554919/raw/10ce87fe71b23216e3075d5648b8b9e56f7758e1/github.css')
resumen <- glue('# Resumen inpección archivo "{excelFile}" \n',
'El archivo se pudo leer de manera correcta, las principales caracteristicas son: \n\n',
'- Número de filas: {f} \n',
'- Número de columnas: {c} \n',
'- Nombres de variable: {vars2} \n')
css <- readLines('https://gist.githubusercontent.com/andyferra/2554919/raw/10ce87fe71b23216e3075d5648b8b9e56f7758e1/github.css')
markdownToHTML(text = resumen,
fragment.only = TRUE,
header = head,
output = 'test.html',
stylesheet = css)
close.connection(css)
source('D:/GoogleDrive/ExplorApp/funciones/data01_excel.R', encoding = 'UTF-8', echo=TRUE)
data <- DM01_leerExcel(excelFile)
source('D:/GoogleDrive/ExplorApp/funciones/data02_DetectFactor.R', encoding = 'WINDOWS-1252', echo=TRUE)
names(data)
names(data[['datos']])
dmDetectFactor(data, Anemia)
dmDetectFactor(data, 'Anemia')
df <- data
var <- 'Anemia'
options(warn = -1)
varname <- var
var <- df[[var]]
nvar <- length(var)
data(mtcars)
mtcars
variables <- names(mtcars)
tdata <- t(mtcars)
View(tdata)
class(tdata)
tdata <- as.data.frame(t(mtcars), stringsAsFactors = FALSE)
# Crear un data.frame
datos <- data.frame(colores = c('Verde', 'Rojo', 'Azul', 'Amarillo', 'Blanco'),
numeros = c(1, 2, 3, 4, 5, 6),
factor  = factor(c('G1', 'G1', 'G1', 'G2', 'G2', 'G2'))
# Crear un data.frame
datos <- data.frame(colores = c('Verde', 'Rojo', 'Azul', 'Amarillo', 'Blanco'),
numeros = c(1, 2, 3, 4, 5, 6),
factor  = factor(c('G1', 'G1', 'G1', 'G2', 'G2', 'G2')))
# Crear un data.frame
datos <- data.frame(colores = c('Verde', 'Rojo', 'Azul', 'Amarillo', 'Blanco', 'Negro'),
numeros = c(1, 2, 3, 4, 5, 6),
factor  = factor(c('G1', 'G1', 'G1', 'G2', 'G2', 'G2')))
View(datos)
# Crear un data.frame
datos <- data.frame(colores = c('Verde', 'Rojo', 'Azul', 'Amarillo', 'Blanco', 'Negro'),
numeros = c(1, 2, 3, 4, 5, 6),
factor  = factor(c('G1', 'G1', 'G1', 'G2', 'G2', 'G2')))
str(datos)
Sys.getenv()
# Crear un data.frame
datos <- data.frame(colores = c('Verde', 'Rojo', 'Azul', 'Amarillo', 'Blanco', 'Negro'),
numeros = c(1, 2, 3, 4, 5, 6),
factor  = factor(c('G1', 'G1', 'G1', 'G2', 'G2', 'G2')),
stringsAsFactors = FALSE)
# Ver la estructura
str(datos)
# Crear un data.frame
datos <- data.frame(colores = c('Verde', 'Rojo', 'Azul', 'Amarillo', 'Blanco', 'Negro'),
numeros = c(1, 2, 3, 4, 5, 6),
factor  = factor(c('G1', 'G1', 'G1', 'G2', 'G2', 'G2')),
stringsAsFactors = FALSE)
# Ver la estructura
str(datos)
# Ver el data.frame
datos
# Crear un data.frame
datos <- data.frame(colores = c('Verde', 'Rojo', 'Azul', 'Amarillo', 'Blanco', 'Negro'),
numeros = c(1, 2, 3, 4, 5, 6),
factor  = factor(c('G1', 'G1', 'G1', 'A2', 'A2', 'A2')),
stringsAsFactors = FALSE)
# Ver la estructura
str(datos)
# Ver el data.frame
datos
summary(mtcars)
library(openxlsx)
library(glue)
library(markdown)
setwd("D:/GoogleDrive/R/ExplorApp")
dir()
excelFile <- 'excel_input.xlsx'
data <- DM01_leerExcel(excelFile)
source('D:/GoogleDrive/R/ExplorApp/funciones/data01_LeerExcel.R', encoding = 'UTF-8', echo=TRUE)
data <- DM01_leerExcel(excelFile)
help(package = 'haven')
library(haven)
# help(package = 'haven')
# library(glue)
library(markdown)
setwd("D:/GoogleDrive/R/ExplorApp")
dir()
setwd("D:/GoogleDrive/R/ExplorApp")
dir()
stataFile <- 'stata09.dta'
# rm(list=ls())
# Intentar leer el archivo
data <- tryCatch(
# Try part
data <- read_dta(stataFile)
# Catch part
warning = function(w){
cat(paste0("> Warning al intentar leer Excel ", excelFile, '\n'))
message(w)
},
error = function(e){
cat(paste0("> Error al intentar leer Excel <", excelFile, '>\n'))
message(e)
}
)
# --------------------------------------------------------------------------- #
library(haven)
# help(package = 'haven')
# library(glue)
library(markdown)
setwd("D:/GoogleDrive/R/ExplorApp")
dir()
stataFile <- 'auto09.dta'
# rm(list=ls())
# data <- DM01_leerExcel(excelFile)
# Intentar leer el archivo
data <- tryCatch(
# Try part
data <- read_dta(stataFile)
# Catch part
warning = function(w){
cat(paste0("> Warning al intentar leer Excel ", excelFile, '\n'))
message(w)
},
error = function(e){
cat(paste0("> Error al intentar leer Excel <", excelFile, '>\n'))
message(e)
}
)
dir()
data <- read_dta(stataFile)
View(data)
View(data)
stataFile <- 'auto12.dta'
stataFile <- 'auto12.dta'
data <- read_dta(stataFile)
View(data)
stataFile <- 'auto13.dta'
data <- read_dta(stataFile)
View(data)
data <- read_stata(stataFile)
# Intentar leer el archivo
data <- tryCatch(
# Try part
data <- read_stata(stataFile),
str(data)
# Catch part
warning = function(w){
cat(paste0("> Warning al intentar leer Excel ", excelFile, '\n'))
message(w)
},
error = function(e){
cat(paste0("> Error al intentar leer Excel <", excelFile, '>\n'))
message(e)
}
)
str(data)
data
data <- as.data.frame(data)
View(data)
data
data <- read_stata(stataFile)
data <- as_factor.data.frame(data)
head(data)
data <- read_stata(stataFile)
data <- as_factor.data.frame(data)
data <- read_stata(stataFile)
data <- data.frame(data)
head(data)
data <- read_stata(stataFile)
str(data)
data <- read_stata(stataFile)
vars <- names(data)
for (v in vars){
print(class(v))
}
data <- read_stata(stataFile)
vars <- names(data)
for (v in vars){
print(class(v))
}
data <- read_stata(stataFile)
data
str(data)
data <- read_stata(stataFile)
class(data)
data.frame(data)
as.tibble(data)
as_tibble(data)
tibble(data)
library(tibble)
as_tibble(data)
class(data)
data <- read_stata(stataFile)
data <- as_tibble(data)
class(data)
str(data)
help(package = 'tibble')
class(data)
vars <- names(data)
for (v in vars){
temp <- data[v]
print(class(v))
}
for (v in vars){
temp <- data[v]
print(class(temp))
}
for (v in vars){
temp <- data[[v]]
print(class(temp))
}
a <- class(temp)
data <- read_dta(stataFile)
vars <- names(data)
for (v in vars){
temp <- data[[v]]
classVar <- class(temp)
if (classVar[1] == 'haven_labelled'){
data[[v]] <- as_factor(data[[v]])
}
}
data
as.data.frame(data)
# Intentar leer el archivo
data <- tryCatch(
# Try part
{
data <- read_dta(stataFile)
vars <- names(data)
for (v in vars){    # Recastear los factores
classVar <- class(data[[v]])
if (classVar[1] == 'haven_labelled'){
data[[v]] <- as_factor(data[[v]])
}
}
data <- as.data.frame(data)
},
# Catch part
warning = function(w){
cat(paste0("> Warning al intentar leer DTA ", excelFile, '\n'))
message(w)
},
error = function(e){
cat(paste0("> Error al intentar leer DTA <", excelFile, '>\n'))
message(e)
}
)
class(data)
View(data)
str(data)
head(data)
# --------------------------------------------------------------------------- #
# ----- Leer un stata con HAVEN --------------------------------------------- #
# ----- Para explorApp, 08.06.2021 (en Fase2, Valdivia) Oliver.Rojas -------- #
# --------------------------------------------------------------------------- #
rm(list = ls())
source('D:/GoogleDrive/R/ExplorApp/funciones/data01_LeerStata.R', encoding = 'UTF-8', echo=TRUE)
data <- DM01_leerStata(excelFile)
data <- DM01_leerStata(stataFile)
source('D:/GoogleDrive/R/ExplorApp/funciones/data01_LeerStata.R', encoding = 'UTF-8', echo=TRUE)
data <- DM01_leerStata(stataFile)
source('D:/GoogleDrive/R/ExplorApp/funciones/data01_LeerStata.R', encoding = 'UTF-8', echo=TRUE)
data <- DM01_leerStata(stataFile)
source('D:/GoogleDrive/R/ExplorApp/funciones/data01_LeerStata.R', encoding = 'UTF-8', echo=TRUE)
data <- DM01_leerStata(stataFile)
data$header
# Inputs
inputs = list(1, 2, 4, -5, 'oops', 0, 10)
length(inputs)
# Una funcion pa probar
lefunc <- function(inputs){
resultado <- data.frame(valor = as.character(), log = as.numeric())
for(input in inputs) {
temp <- data.frame(valor = as.character(input),
log = as.numeric(log(input)),
stringsAsFactors = FALSE)
resultado <- rbind(resultado, temp)
}
return(resultado)
}
# Cuando se corre da error
lefunc(inputs)
# Con funciones no anda, tons hay que dejar todo el codigo en el try
for(input in inputs) {
print(paste("log of", input, "=", log(input)))
}
# ----- Con TRY
for(input in inputs) {
try(
print(paste("log of", input, "=", log(input)))
)
}
# ----- Con TRY
for(input in inputs) {
try(
print(paste("log of", input, "=", log(input)))
)
}
# ----- Con catch se hace algo con el error ----------------------- #
for(input in inputs) {
tryCatch(
# try
print(paste("log of", input, "=", log(input))),
# Si warning
warning = function(w) {
print(paste("negative argument", input))
log(-input)
},
# Si error
error = function(e) {
print(paste("non-numeric argument", input))
NaN
}
)
}
rm(list = ls())
library(haven)
library(glue)
library(markdown)
setwd("D:/GoogleDrive/R/ExplorApp")
dir()
dataFile <- 'auto13.dta'
file.info(dataFile)
# Chequeos varios
file.exists(dataFile)
library(stringr)
str_split_fixed(dataFile, '.')
str_split(dataFile, '.')
strsplit(dataFile, '.')
strsplit(dataFile, '\.')
strsplit(dataFile, '\\.')
str_split(dataFile, '\\.')
dataFile <- 'auto.13.dta'
strsplit(dataFile, '\\.')
strsplit(dataFile, '\\.', fixed = TRUE)
extension = strsplit(dataFile, '\\.')
extension = extension[[1]]
extension = extension[length(extension)]
# Cargar las librerías
library(c('dplyr', 'haven', 'glue', 'haven'))
# Cargar las librerías
library(list = c('dplyr', 'haven', 'glue', 'haven'))
# Cargar las librerías
lapply(c('dplyr', 'haven', 'glue', 'haven'), library)
# Cargar las librerías
lapply(c('dplyr', 'haven', 'glue', 'haven'), library, character.only = TRUE)
# Cargar las librerías
lapply(c('dplyr', 'haven', 'glue', 'haven'), require, character.only = TRUE)
rm(list = ls())
