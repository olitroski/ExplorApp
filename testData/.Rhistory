asc <- function(x) { strtoi(charToRaw(x),16L) }
quiero <- asc(char)
encuentra <- TRUE
i <- 1
while (encuentra){
if (nchar(as.character(quiero)) == 2){
quiero <- quiero + 224 # cualquier valor
}
print(i)
test <- as.numeric(substr(e, i, i + 2))
if (test == quiero){
encuentra <- FALSE
} else {
i <- i + 1
}
}
return(i)
}
codificar(' ')
nchar(e)
source("C:/Users/olitr/Desktop/codificar.r", echo=TRUE)
codificar(' ')
codificar(' ')
codificar <- function(char){
asc <- function(x) { strtoi(charToRaw(x),16L) }
quiero <- asc(char)
encuentra <- TRUE
i <- 1
while (encuentra){
if (nchar(as.character(quiero)) == 2){
quiero <- quiero + 124 # cualquier valor
}
# print(i)
test <- as.numeric(substr(e, i, i + 2))
if (test == quiero){
encuentra <- FALSE
} else {
i <- i + 1
}
}
return(i)
}
source("C:/Users/olitr/Desktop/codificar.r", echo=TRUE)
codificar(' ')
codificar(' ')
codificar(' ')
source("C:/Users/olitr/Desktop/codificar.r", echo=TRUE)
codificar(' ')
deco(222)
source("C:/Users/olitr/Desktop/codificar.r", echo=TRUE)
source("C:/Users/olitr/Desktop/codificar.r", echo=TRUE)
codificar(' ')
codificar('z')
asc('z')
source("C:/Users/olitr/Desktop/codificar.r", echo=TRUE)
source("C:/Users/olitr/Desktop/codificar.r", echo=TRUE)
asc(' ')
cid(' ')
codi(' ')
# library(gmp)
rm(list = ls())
# 32  espacio
# 122 espacio
chr <- function(n) { rawToChar(as.raw(n)) }
asc <- function(x) { strtoi(charToRaw(x),16L) }
# Secuencia
e <- Eulerian(3000, 1)
e <- as.character(e)
nchar(e)
codi <- function(char){
quiero <- asc(char)
encuentra <- TRUE
i <- 1
while (encuentra){
# Si el ascci es de 2 caracteres, buscar 2 espacios
if (nchar(as.character(quiero)) == 2){
test <- as.numeric(substr(e, i, i + 1))
} else {
test <- as.numeric(substr(e, i, i + 2))
}
# Compara
if (test == quiero){
encuentra <- FALSE
} else {
i <- i + 1
}
}
return(i)
}
codi(' ')
char <- ' '
quiero <- as.character(asc(char))
encuentra <- TRUE
i <- 1
nchar(quiero) == 2
quiero <- paste0('0', quiero)
# Ahora a buscar
test <- as.numeric(substr(e, i, i + 2))
# Ahora a buscar
test <- substr(e, i, i + 2)
test == quiero
rm(list = ls())
chr <- function(n) { rawToChar(as.raw(n)) }
asc <- function(x) { strtoi(charToRaw(x),16L) }
# Secuencia
e <- Eulerian(3000, 1)
e <- as.character(e)
nchar(e)
codi <- function(char){
quiero <- as.character(asc(char))
encuentra <- TRUE
i <- 1
while (encuentra){
# Si el ascci es de 2 caracteres, agrega un cero, asi siempre tener 3 digitos
if (nchar(quiero) == 2){
quiero <- paste0('0', quiero)
}
# Ahora a buscar
test <- substr(e, i, i + 2)
# Compara
if (test == quiero){
encuentra <- FALSE
} else {
i <- i + 1
}
}
return(i)
}
# En que lugar se la secuencia estÃ¡ el caracter
asc(' ')
lugar <- codi(' ')
# Rescatar valor
lugar <- substr(e, lugar, lugar + 2)
# Deco
deco <- function(lugar){
# Rescatar valor
lugar <- substr(e, lugar, lugar + 2)
return(chr(as.numeric(lugar)))
}
asc(' ')
lugar <- codi(' ')
source("C:/Users/olitr/Desktop/codificar.r", encoding = 'UTF-8', echo=TRUE)
print('Caracter a buscar:', letra)
paste('Caracter a buscar:', letra)
paste('Valor ascii:', asc(letra))
paste('lugar ascci en secuencia:', codi(letra))
paste('Decodeo:', codi(letra), 'es', deco(codi(letra)))
strsplit('ola k ase', 0)
strsplit('ola k ase', 1)
strsplit('ola k ase', '')
texto <- strsplit('ola k ase', '')[[1]]
source("C:/Users/olitr/Desktop/codificar.r", encoding = 'UTF-8', echo=TRUE)
for (t in texto){
print(t)
print(codi(t))
}
codi('l')
source("C:/Users/olitr/Desktop/codificar.r", encoding = 'UTF-8', echo=TRUE)
nchar(e)
asc('l')
char <- 'l'
quiero <- as.character(asc(char))
encuentra <- TRUE
i <- 1
while (encuentra){
# Si el ascci es de 2 caracteres, agrega un cero, asi siempre tener 3 digitos
if (nchar(quiero) == 2){
quiero <- paste0('0', quiero)
}
# Ahora a buscar
print(i)
test <- substr(e, i, i + 2)
# Compara
if (test == quiero){
encuentra <- FALSE
} else {
i <- i + 1
}
}
nchar(quiero) == 2
# Ahora a buscar
print(i)
substr(e, i, i + 2)
test == quiero
i <- i + 1
test <- substr(e, i, i + 2)
substr(e, i, i + 2)
char <- ' '
quiero <- as.character(asc(char))
encuentra <- TRUE
i <- 1
while (encuentra){
# Si el ascci es de 2 caracteres, agrega un cero, asi siempre tener 3 digitos
if (nchar(quiero) == 2){
quiero <- paste0('0', quiero)
}
# Ahora a buscar
print(i)
test <- substr(e, i, i + 2)
# Compara
if (test == quiero){
encuentra <- FALSE
} else {
i <- i + 1
}
}
nchar(e)
quiero <- as.character(asc(char))
if (nchar(quiero) == 2){
quiero <- paste0('0', quiero)
}
quiero <- as.character(asc(char))
if (nchar(quiero) == 2){
quiero <- paste0('0', quiero)
}
quiero <- as.character(asc(char))
if (nchar(quiero) == 2){
quiero <- paste0('0', quiero)
}
quiero <- as.character(asc(char))
if (nchar(quiero) == 2){
quiero <- paste0('0', quiero)
}
encuentra <- TRUE
i <- 1
while (encuentra){
# Ahora a buscar
print(i)
test <- substr(e, i, i + 2)
# Compara
if (test == quiero){
encuentra <- FALSE
} else {
i <- i + 1
}
}
char <- 'l'
quiero <- as.character(asc(char))
if (nchar(quiero) == 2){
quiero <- paste0('0', quiero)
}
encuentra <- TRUE
i <- 1
while (encuentra){
# Ahora a buscar
print(i)
test <- substr(e, i, i + 2)
# Compara
if (test == quiero){
encuentra <- FALSE
} else {
i <- i + 1
}
}
test <- substr(e, i, i + 2)
char <- 'l'
# Si el ascci es de 2 caracteres, agrega un cero, asi siempre tener 3 digitos
quiero <- as.character(asc(char))
if (nchar(quiero) == 2){
quiero <- paste0('0', quiero)
}
encuentra <- TRUE
i <- 1
while (encuentra){
# Ahora a buscar
print(i)
test <- substr(e, i, i + 2)
# Compara
if (test == quiero){
encuentra <- FALSE
} else {
if (i >= nchar(e)){
encuentra <- FALSE
} else {
i <- i + 1
}
}
}
return(i)
quiero <- as.character(asc(char))
if (nchar(quiero) == 2){
quiero <- paste0('0', quiero)
}
encuentra <- TRUE
i <- 1
while (encuentra){
# Ahora a buscar
print(i)
test <- substr(e, i, i + 2)
# Compara
if (test == quiero){
encuentra <- FALSE
} else {
if (i >= nchar(e)){
encuentra <- FALSE
return(NULL)
} else {
i <- i + 1
}
}
}
codi <- function(char){
# Si el ascci es de 2 caracteres, agrega un cero, asi siempre tener 3 digitos
quiero <- as.character(asc(char))
if (nchar(quiero) == 2){
quiero <- paste0('0', quiero)
}
encuentra <- TRUE
i <- 1
while (encuentra){
# Ahora a buscar
print(i)
test <- substr(e, i, i + 2)
# Compara
if (test == quiero){
encuentra <- FALSE
} else {
if (i >= nchar(e)){
encuentra <- FALSE
return(NULL)
} else {
i <- i + 1
}
}
}
return(i)
}
codi(' ')
codi <- function(char){
# Si el ascci es de 2 caracteres, agrega un cero, asi siempre tener 3 digitos
quiero <- as.character(asc(char))
if (nchar(quiero) == 2){
quiero <- paste0('0', quiero)
}
encuentra <- TRUE
i <- 1
while (encuentra){
# Ahora a buscar
# print(i)
test <- substr(e, i, i + 2)
# Compara
if (test == quiero){
encuentra <- FALSE
} else {
if (i >= nchar(e)){
encuentra <- FALSE
return(NULL)
} else {
i <- i + 1
}
}
}
return(i)
}
char <- 'l'
codi(' ')
# char <- 'l'
codi(' ')
char <- ' '
quiero <- as.character(asc(char))
if (nchar(quiero) == 2){
quiero <- paste0('0', quiero)
}
source("C:/Users/olitr/Desktop/codificar.r", encoding = 'UTF-8', echo=TRUE)
letra <- ' '
paste('Caracter a buscar:', letra)
paste('Valor ascii:', asc(letra))
paste('lugar ascci en secuencia:', codi(letra))
paste('Decodeo:', codi(letra), 'es', deco(codi(letra)))
letra <- ' '
paste('Caracter a buscar:', letra)
paste('Valor ascii:', asc(letra))
paste('lugar ascci en secuencia:', codi(letra))
paste('Decodeo:', codi(letra), 'es', "'", deco(codi(letra)), "'")
letra <- ' '
paste('Caracter a buscar:', letra)
paste('Valor ascii:', asc(letra))
paste('lugar ascci en secuencia:', codi(letra))
paste('Decodeo:', codi(letra), 'es', "'", deco(codi(letra)), "'", sep = "")
letra <- ' '
paste('Caracter a buscar:', letra)
paste('Valor ascii:', asc(letra))
paste('lugar ascci en secuencia:', codi(letra))
paste('Decodeo: ', codi(letra), ' es ', "'", deco(codi(letra)), "'", sep = "")
source("C:/Users/olitr/Desktop/codificar.r", encoding = 'UTF-8', echo=TRUE)
source("C:/Users/olitr/Desktop/codificar.r", encoding = 'UTF-8', echo=TRUE)
source("C:/Users/olitr/Desktop/codificar.r", encoding = 'UTF-8', echo=TRUE)
source("C:/Users/olitr/Desktop/codificar.r", encoding = 'UTF-8', echo=TRUE)
nchar(e)
source("C:/Users/olitr/Desktop/codificar.r", encoding = 'UTF-8', echo=TRUE)
source("C:/Users/olitr/Desktop/codificar.r", encoding = 'UTF-8', echo=TRUE)
source("C:/Users/olitr/Desktop/codificar.r", encoding = 'UTF-8', echo=TRUE)
texto <- strsplit('0', '')[[1]]
codi('0')
# Secuencia
e <- Eulerian(5000, 0)
source("C:/Users/olitr/Desktop/codificar.r", encoding = 'UTF-8', echo=TRUE)
# Secuencia
e <- Eulerian(9000, 1)
# Secuencia
e <- Eulerian(8000, 1)
nchar(e)
Eulerian(100, 1)
Eulerian(100, 1)
Eulerian(100, 1)
Eulerian(100, 1)
Eulerian(100, 1)
Eulerian(100, 1)
Eulerian(100, 1)
Eulerian(100, 1)
Eulerian(100, 2)
Eulerian(100, 3)
set.seed(4128)
runif(50)
runif(50, 0, 10)
runif(50, 5, 10)
uni <- runif(5000)
uni <- as.character(uni)
uni <- paste(uni, collapse = '')
uni <- sub('.', '', uni)
uni <- gsub('.', '', uni)
uni <- runif(5000)
uni <- as.character(uni)
uni <- paste(uni, collapse = '')
uni <- sub('.', '', uni)
uni <- runif(5000)
uni <- as.character(uni)
uni <- paste(uni, collapse = '')
uni <- sub('.', '', uni)
set.seed(4128)
uni <- runif(5000)
uni <- as.character(uni)
uni <- paste(uni, collapse = '')
uni <- sub('.', '', uni)
set.seed(4128)
uni <- runif(5000)
uni <- as.character(uni)
uni <- paste(uni, collapse = '')
uni <- sub('.', '', uni)
set.seed(4128)
uni <- runif(5000)
uni <- as.character(uni)
uni <- paste(uni, collapse = '')
uni <- sub('.', '', uni)
uni <- sub('\.', '', uni)
uni <- sub('\\.', '', uni)
uni <- gsub('\\.', '', uni)
nchar(uni)
source("C:/Users/olitr/Desktop/codificar.r", encoding = 'UTF-8', echo=TRUE)
source("C:/Users/olitr/Desktop/codificar.r", encoding = 'UTF-8', echo=TRUE)
texto <- strsplit('0', '')[[1]]
codi('0')
texto <- strsplit('ola k ase', '')[[1]]
for (t in texto){
print(paste(t, codi(t), deco(codi(t))))
}
texto <- strsplit('ola k \nase', '')[[1]]
for (t in texto){
print(paste(t, codi(t), deco(codi(t))))
}
substr(e, 0, 100)
cien <- "0561853946186602069347646180540309413299020379780241138827754185081783689092844709542938538361340448"
cien == substr(e, 0, 100)
rm(list=ls())
setwd('D:/GoogleDrive/R/ExplorApp')
source('gitLoader.R')
explorAppLoader(local = TRUE)
rm(list=ls())
setwd('D:/GoogleDrive/R/ExplorApp')
source('gitLoader.R')
explorAppLoader(local = TRUE)
source("D:/GoogleDrive/R/ExplorApp/funciones/data02_DetectClass.R", encoding = 'WINDOWS-1252', echo=TRUE)
rm(list=ls())
setwd('D:/GoogleDrive/R/ExplorApp')
source('gitLoader.R')
explorAppLoader(local = TRUE)
ruta = 'D:/GoogleDrive/R/ExplorApp/funciones'
setwd(ruta)
print(getwd())
funcs <- dir()
funcs <- funcs[grep("[rR$]", funcs)]
for (f in funcs){
print(paste('Cargando: ', f))
source(f)
}
source(f)
f
source(f)
source("data02_DetectClass.R")
setwd(ruta)
source(f)
rm(list=ls())
setwd('D:/GoogleDrive/R/ExplorApp')
source('gitLoader.R')
explorAppLoader(local = TRUE)
setwd('D:/GoogleDrive/R/ExplorApp/testData')
dataList <- dataLoader("excel_input.xlsx")
datos <- as.data.table(dataList[['datos']])
varClases <- dmDetectClass(datos)
varMissing <- dmDetectMissing(datos, varClases)
varTablas <- dmDetectTab(datos, varClases)
varPlots <- dmDetectOutlier(datos, varClases)
info()
# --------------------------------------------------------------------------- #
# ----- Creacion del main html para la fase de distribuciÃ³n ----------------- #
# ----- ExplorApp (en Fase2 23.06.2021, Valdivia) Oliver.Rojas -------------- #
# --------------------------------------------------------------------------- #
ruta <- "C:/Users/olitr/Desktop/"
mtcars[1:10, 1:2]
a <- mtcars
row.names(a) <- NULL
a[1:10, 1:2]
